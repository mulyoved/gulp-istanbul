{
  "name": "gulp-istanbul",
  "version": "0.10.0",
  "description": "Istanbul unit test coverage plugin for gulp.",
  "keywords": [
    "gulpplugin",
    "coverage",
    "istanbul",
    "unit test"
  ],
  "homepage": "https://github.com/SBoudrias/gulp-istanbul",
  "bugs": {
    "url": "https://github.com/SBoudrias/gulp-istanbul/issues"
  },
  "author": {
    "name": "Simon Boudrias",
    "email": "admin@simonboudrias.com",
    "url": "https://github.com/SBoudrias"
  },
  "main": "index.js",
  "files": [
    "index.js"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/SBoudrias/gulp-istanbul.git"
  },
  "scripts": {
    "pretest": "jshint index.js ./test/.",
    "test": "mocha -R spec"
  },
  "dependencies": {
    "gulp-util": "^3.0.1",
    "istanbul": "^0.3.17",
    "istanbul-threshold-checker": "^0.1.0",
    "lodash": "^3.0.1",
    "through2": "^0.6.3"
  },
  "devDependencies": {
    "gulp": "^3.6.2",
    "gulp-mocha": "^2.0.0",
    "isparta": "^3.0.0",
    "jshint": "^2.5.0",
    "mocha": "^2.0.1",
    "rimraf": "^2.2.8"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "gitHead": "52a315773b2da6f42581a1accd51c4b805cdd0d1",
  "readme": "gulp-istanbul [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\r\n===========================\r\n\r\n[Istanbul][istanbul] unit test coverage plugin for [gulp][gulp].\r\n\r\nWorks on top of any Node.js unit test framework.\r\n\r\nInstallation\r\n---------------\r\n\r\n```shell\r\nnpm install --save-dev gulp-istanbul\r\n```\r\n\r\nExample\r\n---------------\r\n\r\nIn your `gulpfile.js`:\r\n\r\n#### Node.js testing\r\n\r\n```javascript\r\nvar istanbul = require('gulp-istanbul');\r\n// We'll use mocha here, but any test framework will work\r\nvar mocha = require('gulp-mocha');\r\n\r\ngulp.task('test', function (cb) {\r\n  gulp.src(['lib/**/*.js', 'main.js'])\r\n    .pipe(istanbul()) // Covering files\r\n    .pipe(istanbul.hookRequire()) // Force `require` to return covered files\r\n    .on('finish', function () {\r\n      gulp.src(['test/*.js'])\r\n        .pipe(mocha())\r\n        .pipe(istanbul.writeReports()) // Creating the reports after tests ran\r\n        .pipe(istanbul.enforceThresholds({ thresholds: { global: 90 } })) // Enforce a coverage of at least 90%\r\n        .on('end', cb);\r\n    });\r\n});\r\n```\r\n\r\n#### Browser testing\r\n\r\nFor browser testing, you'll need to write the files covered by istanbul in a directory from where you'll serve these files to the browser running the test. You'll also need a way to extract the value of the [coverage variable](#coveragevariable) after the test have runned in the browser.\r\n\r\nBrowser testing is hard. If you're not sure what to do, then I suggest you take a look at [Karma test runner](http://karma-runner.github.io) - it has built-in coverage using Istanbul.\r\n\r\n\r\n```javascript\r\nvar istanbul = require('gulp-istanbul');\r\n\r\ngulp.task('test', function (cb) {\r\n  gulp.src(['lib/**/*.js', 'main.js'])\r\n  .pipe(istanbul()) // Covering files\r\n  .pipe(gulp.dest('test-tmp/'))\r\n  .on('finish', function () {\r\n    gulp.src(['test/*.html'])\r\n    .pipe(testFramework())\r\n    .pipe(istanbul.writeReports()) // Creating the reports after tests ran\r\n    .on('end', cb);\r\n  });\r\n});\r\n```\r\n\r\nAPI\r\n--------------\r\n\r\n### istanbul(opt)\r\n\r\nInstrument files passed in the stream.\r\n\r\n#### opt\r\nType: `Object` (optional)\r\n```js\r\n{\r\n  coverageVariable: 'someVariable',\r\n  ...other Instrumeter options...\r\n}\r\n```\r\n\r\n##### coverageVariable\r\nType: `String` (optional)\r\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\r\n\r\nThe global variable istanbul uses to store coverage\r\n\r\nSee also:\r\n- [istanbul coverageVariable][istanbul-coverage-variable]\r\n- [SanboxedModule][sandboxed-module-coverage-variable]\r\n\r\n##### includeUntested\r\nType: `Boolean` (optional)\r\nDefault: `false`\r\n\r\nFlag to include test coverage of files that aren't `require`d by any tests\r\n\r\nSee also:\r\n- [istanbul \"0% coverage\" issue](https://github.com/gotwarlost/istanbul/issues/112)\r\n\r\n##### instrumenter\r\nType: `Instrumenter` (optional)\r\nDefault: `istanbul.Instrumenter`\r\n\r\nCustom Instrumenter to be used instead of the default istanbul one.\r\n\r\n```js\r\nvar isparta = require('isparta');\r\nvar istanbul = require('gulp-istanbul');\r\n\r\ngulp.src('lib/**.js')\r\n  .pipe(istanbul({\r\n    instrumenter: isparta.Instrumenter\r\n  }));\r\n```\r\n\r\nSee also:\r\n- [isparta](https://github.com/douglasduteil/isparta)\r\n\r\n##### Other Istanbul Instrumenter options\r\n\r\nSee:\r\n- [istanbul Instrumenter documentation][istanbul-coverage-variable]\r\n\r\n### istanbul.hookRequire()\r\n\r\nOverwrite `require` so it returns the covered files. The method take an optional [option object](https://gotwarlost.github.io/istanbul/public/apidocs/classes/Hook.html#method_hookRequire).\r\n\r\nAlways use this option if you're running tests in Node.js\r\n\r\n### istanbul.summarizeCoverage(opt)\r\n\r\nget coverage summary details\r\n\r\n#### opt\r\nType: `Object` (optional)\r\n```js\r\n{\r\n  coverageVariable: 'someVariable'\r\n}\r\n```\r\n##### coverageVariable\r\nType: `String` (optional)\r\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\r\n\r\nThe global variable istanbul uses to store coverage\r\n\r\nSee also:\r\n- [istanbul coverageVariable][istanbul-coverage-variable]\r\n- [SanboxedModule][sandboxed-module-coverage-variable]\r\n\r\n#### returns\r\nType: `Object`\r\n```js\r\n{\r\n  lines: { total: 4, covered: 2, skipped: 0, pct: 50 },\r\n  statements: { total: 4, covered: 2, skipped: 0, pct: 50 },\r\n  functions: { total: 2, covered: 0, skipped: 0, pct: 0 },\r\n  branches: { total: 0, covered: 0, skipped: 0, pct: 100 }\r\n}\r\n```\r\n\r\nSee also:\r\n- [istanbul utils.summarizeCoverage()][istanbul-summarize-coverage]\r\n\r\n\r\n### istanbul.writeReports(opt)\r\n\r\nCreate the reports on stream end.\r\n\r\n#### opt\r\nType: `Object` (optional)\r\n```js\r\n{\r\n  dir: './coverage',\r\n  reporters: [ 'lcov', 'json', 'text', 'text-summary', CustomReport ],\r\n  reportOpts: { dir: './coverage' },\r\n  coverageVariable: 'someVariable'\r\n}\r\n```\r\n\r\nYou can pass individual configuration to a reporter.\r\n```js\r\n{\r\n  dir: './coverage',\r\n  reporters: [ 'lcovonly', 'json', 'text', 'text-summary', CustomReport ],\r\n  reportOpts: { \r\n    lcov: {dir: 'lcovonly', file: 'lcov.info'}\r\n    json: {dir: 'json', file: 'converage.json'}\r\n  },\r\n  coverageVariable: 'someVariable'\r\n}\r\n```\r\n##### dir\r\nType: `String` (optional)\r\nDefault: `./coverage`\r\n\r\nThe folder in which the reports are to be outputted.\r\n\r\n##### reporters\r\nType: `Array` (optional)\r\nDefault: `[ 'lcov', 'json', 'text', 'text-summary' ]`\r\n\r\nThe list of available reporters:\r\n- `clover`\r\n- `cobertura`\r\n- `html`\r\n- `json`\r\n- `lcov`\r\n- `lcovonly`\r\n- `none`\r\n- `teamcity`\r\n- `text`\r\n- `text-summary`\r\n\r\nYou can also specify one or more custom reporter objects as items in the array. These will be automatically registered with istanbul.\r\n\r\nSee also `require('istanbul').Report.getReportList()`\r\n\r\n##### coverageVariable\r\nType: `String` (optional)\r\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\r\n\r\nThe global variable istanbul uses to store coverage\r\n\r\nSee also:\r\n- [istanbul coverageVariable][istanbul-coverage-variable]\r\n- [SanboxedModule][sandboxed-module-coverage-variable]\r\n\r\n\r\n### istanbul.enforceThresholds(opt)\r\n\r\nChecks coverage against minimum acceptable thresholds. Fails the build if any of the thresholds are not met.\r\n\r\n#### opt\r\nType: `Object` (optional)\r\n```js\r\n{\r\n  coverageVariable: 'someVariable',\r\n  thresholds: {\r\n    global: 60,\r\n    each: -10\r\n  }\r\n}\r\n```\r\n\r\n##### coverageVariable\r\nType: `String` (optional)\r\nDefault: `'$$cov_' + new Date().getTime() + '$$'`\r\n\r\nThe global variable istanbul uses to store coverage\r\n\r\n\r\n##### thresholds\r\nType: `Object` (required)\r\n\r\nMinimum acceptable coverage thresholds. Any coverage values lower than the specified threshold will fail the build.\r\n\r\nEach threshold value can be:\r\n- A positive number - used as a percentage\r\n- A negative number - used as the maximum amount of coverage gaps\r\n- A falsey value will skip the coverage\r\n\r\nThresholds can be specified across all files (`global`) or per file (`each`):\r\n```\r\n{\r\n  global: 80,\r\n  each: 60\r\n}\r\n```\r\n\r\nYou can also specify a value for each metric:\r\n```\r\n{\r\n  global: {\r\n    statements: 80,\r\n    branches: 90,\r\n    lines: 70,\r\n    functions: -10\r\n  }\r\n  each: {\r\n    statements: 100,\r\n    branches: 70,\r\n    lines: -20\r\n  }\r\n}\r\n```\r\n\r\n#### emits\r\n\r\nA plugin error in the stream if the coverage fails\r\n\r\nLicense\r\n------------\r\n\r\n[MIT License](http://en.wikipedia.org/wiki/MIT_License) (c) Simon Boudrias - 2013\r\n\r\n[istanbul]: http://gotwarlost.github.io/istanbul/\r\n[gulp]: https://github.com/gulpjs/gulp\r\n\r\n[npm-url]: https://npmjs.org/package/gulp-istanbul\r\n[npm-image]: https://badge.fury.io/js/gulp-istanbul.svg\r\n\r\n[travis-url]: http://travis-ci.org/SBoudrias/gulp-istanbul\r\n[travis-image]: https://secure.travis-ci.org/SBoudrias/gulp-istanbul.svg?branch=master\r\n\r\n[depstat-url]: https://david-dm.org/SBoudrias/gulp-istanbul\r\n[depstat-image]: https://david-dm.org/SBoudrias/gulp-istanbul.svg\r\n\r\n[istanbul-coverage-variable]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/Instrumenter.html\r\n[istanbul-summarize-coverage]: http://gotwarlost.github.io/istanbul/public/apidocs/classes/ObjectUtils.html#method_summarizeCoverage\r\n[sandboxed-module-coverage-variable]: https://github.com/felixge/node-sandboxed-module/blob/master/lib/sandboxed_module.js#L240\r\n",
  "readmeFilename": "README.md",
  "_id": "gulp-istanbul@0.10.0",
  "_shasum": "6b6c394ef80116362f5daa0cb6ae9255ad8a0034",
  "_from": "git+https://github.com/mulyoved/gulp-istanbul.git",
  "_resolved": "git+https://github.com/mulyoved/gulp-istanbul.git#52a315773b2da6f42581a1accd51c4b805cdd0d1"
}
